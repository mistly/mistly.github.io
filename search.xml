<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第五周  2019.11.92019.11.16</title>
    <url>/2019/11/15/%E7%AC%AC%E4%BA%94%E5%91%A8%20%202019.11.92019.11.16/</url>
    <content><![CDATA[<h2 id="第五周-2019-11-9-2019-11-16"><a href="#第五周-2019-11-9-2019-11-16" class="headerlink" title="第五周  2019.11.9~2019.11.16"></a>第五周  2019.11.9~2019.11.16</h2><p><strong>Xcode文件管理区</strong></p>
<p><strong>左上角第一个图标：</strong></p>
<p><u>AppDeleate.swift:</u><em>应用代理文件，是系统运行本应用的委托，里面定义了如程序的进入与退出，设备方向的旋转等众多全局方法。</em></p>
<p><u>Viewcontroller.swift:</u><em>视图控制器可以创建喝管理视图，也可以监测视图大小以适应屏幕，以及在视图和模板之间进行数据的传递。</em></p>
<p><u>Main.storyboard:</u><em>故事板可以使所有视图控制器以及它们之间的关系一目了然。故事板也是适配多个分辨率设备的利器。</em></p>
<p><u>LaunchScreen.storyboard:</u><em>故事场景板，可以设计和适配程序的启动页。</em></p>
<p><u>Assets.xcassets:</u><em>资源文件夹，方便进行图片管理，并且在读取图片时不需要图片名的后缀。它将图片进行加密压缩，一提高软件的安全性。</em></p>
<p><u>Products:</u><em>产品目录，存放项目编译后生成的文件包。使用【产品&gt;编译】命令，可以在此处生成适合发布到苹果市场的应用压缩包。</em></p>
<p><strong>左上角第二个图标：*</strong>控制面板，进去源码版本控制面板。在此页面板可以对源码进行版本的管理。*</p>
<p><strong>左上角第三个图标：*</strong>层级面板，显示了项目中的类列表，点击类名左侧的右向箭头，可以查看类下的方法。*</p>
<p><strong>*左上角第四个图标：</strong>搜索面板*</p>
<p><strong>左上角的五个图标：*</strong>状况面板，显示了所有文档中的代码问题。黄色图标表示各种不影响程序运行的小问题，红色标志表示致命错误，需要修复才能运行。*</p>
<p><strong>左上角第六个图标：*</strong>测视面板，显示了项目的测试用例。*</p>
<p><strong>左上角第七个图标：*</strong>调试面板，在测视应用中极为有用。*</p>
<p><u>CPU：</u><em>处理器，观察程序运行时，设备的处理器的实时状况。</em></p>
<p><u>Memory：</u><em>内存，观察程序运行中内存的实时状态。</em></p>
<p><u>Disk：</u><em>硬盘，观察程序运行中，对硬盘的读取与存入的实时状态。</em></p>
<p><u>Network:</u><em>网络，观察程序运行中的网络请求状态。</em></p>
<p><strong>左上角第八个图标：*</strong>断点面板，在代码区进行调试时，这里将列出项目中的所有断点。*</p>
<p><strong>左上角第九个图标：*</strong>日志面板，记录当前项目所有的历史动作。*</p>
<p> <strong>一、Assets.xcassets能干什么</strong><br><em>Assets.xcassets是用来存放图像资源文件；</em></p>
<p><strong>二*、使用Assets的好处</strong><br><em>1、自动管理图片,如@1x,@2x图片,使用的时候使用Asset 名字即可；</em></p>
<p><em>2、管理应用的Icon和Default图片,这个挺方便的,可以完全抛开以前规范命名如Icon.png,<a href="mailto:Icon@2x.png" target="_blank" rel="noopener">Icon@2x.png</a>,Xcode会自动识别尺寸然后匹配进去；</em></p>
<p><em>3、个人觉得方便模块图片管理,可以针对模块建立Component1.xcassets,在这个Category中去建立新的Image set；</em></p>
<p><em>4、可以可视化管理图片拉伸,从而抛弃到处使用resizeImage…来获取拉伸图片；</em></p>
<p><strong>三、使用Assets注意事项</strong></p>
<p><em>1、在Assets中的图片不能通过imageWithContentsOfFile:加载；</em></p>
<p><em>2、imageName:加载的图片要么是Assets中的图片，要么是资源包中的图片，如果要用imageName:加载其他的图片，必须在文件名后面添加扩展名。</em></p>
<p> <strong>四、如何使用Assets</strong></p>
<p><em>1、创建Asset Catalog：</em><br><em>方法:使用 File - new - File - Resource - Asset Catalog,会需要输入名字和选择Target；</em></p>
<p><em>建立完毕后单击,文档会将整个操作区域从左到右分为三部分,SetList, Set Viewer, Set attributes inspector；</em></p>
<p><em>在SetList区域左下角会有新增(+)和删除(-)按钮,实际在区域内右击也会有对应选项；</em></p>
<p><em>New Image Set:图片夹,这个常用；</em></p>
<p><em>New App Icon:用于图标管理；</em></p>
<p><em>New Lauch Image: 启动图；</em></p>
<p><em>New Folder:新文件夹,支持在文件夹嵌套</em></p>
<p> <strong>自动布局（layout）</strong></p>
<p><em>基于约束的布局系统，以便于适配不同尺寸机型喝设备旋转。（没有自动布局，Storyboard的布局时以像素计算的（绝对布局））。</em></p>
<p><em>中心思想：你如何描述一个元素</em></p>
<p><em>约束=位置规则</em></p>
<p><em>布局条【右下角】（从左到右第二个开始）：组合、对齐、新增、修正</em></p>
<p> <strong>UILabel</strong>  (继承于UIView)</p>
<p><u>1.创建方法</u>: <em>UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(origini.x, origin.y, size.width, size.height)]</em>   </p>
<p><u>2.常用属性:</u></p>
<p><u>标签文本:</u> <em>label.text   NSString类型 可设置或获取label的文本*</em></p>
<p> <u>文本颜色:*</u> <em>label.textColor  UIColor类型 可设置或获取label文本的颜色*</em></p>
<p>  <u>文本字体:</u> <em>label.font  UIFont类型   可设置或获取字体大小,字体等 。</em></p>
<p>  <u>文本对齐方式:</u> <em>label.textAlignment NSTextAlignment类型(枚举) 可设置或获取文本的对齐式:NSTextAlignmentLeft(左对齐), NSTextAlignmentCenter(居中)等方式</em></p>
<p>  <u>标签(框架)大小:</u> <em>label.frame  CGRect类型  可设置或获取label的大小(相对大小)  label.frame = CGRect(0,0,5,15)  注意:设置label的frame属性时不能对frame的origin或size直接赋值,否则会报错。</em><br>    <u>文本行数:</u> <em>label.numberOfLines  NSInteger类型 可设置或获取文本的行数  注意:当将此属性的值设置为0时,label文本显示的行数则不受限制,即能显示多少行就显示多少行</em></p>
<p>  <u>文本换行模式:</u> <em>label.lineBreakMode  NSLineBreakMode类型(枚举)  可设置或获取文本的换行模式:NSLineBreakByWordWrapping, NSLineBreakByCliping等等模式</em></p>
<p>  <u>文本阴影颜色:</u> <em>label.shadowColor  UIColor类型  可设置或获取文本的阴影颜色</em> </p>
<p>  <u>阴影方向:</u> <em>label.shadowOffset  CGSize类型  可设置或获取文本阴影的方向和位置, 高height值的正,负分别代表上,下方向的偏移量,同理宽width值代表左右方向</em></p>
<p>   <strong>UITextField</strong> (继承于UIControl (UIControl继承于UIView, UIView又继承于UIResponse))</p>
<p><u>1.创建方法:</u> <em>UITextField *textField = [[UITextField alloc] initWithFrame:CGRectMake(origini.x, origin.y, size.width, size.height)]</em></p>
<p><u>2.常用属性:</u></p>
<p><u>边框类型:</u> <em>textField.borderStyle  UITextBorderStyle类型(枚举) 可设置或获取文本框的边框类型</em></p>
<p>  <u>文本框内容:</u> <em>textField.text  NSString类型 可设置或获取文本框的内容 。</em></p>
<p>  <u>文本框的默认内容:</u> <em>textField.placeHolder  NSString类型 可设置或获取文本框编辑前的默认显示内容</em></p>
<p>  <u>文本对齐方式:</u> t<em>extField.textAlignment NSTextAlignment类型(枚举)</em></p>
<p>  <u>清除内容按钮:  <em>开始编辑时是否清除原有内容: textField.clearsOnBeginEditing  BOOL类型 设置在点击文本框进行编辑时是否清除掉原有的内容</em></p>
<p>  <u>键盘样式:</u> <em>textField.keyboardType UIKeyboardType类型(枚举) 设置弹出的键盘的类型。</em></p>
<p>  <u>回车键样式:</u> <em>textField.returnKeyType UIReturnKeyType类型(枚举) 可设置弹出的键盘的return键的类型。</em></p>
<p>  <u>是否密文输入:</u> <em>textField.secureTextEntry BOOL类型 可设置编辑文本框时是否密文输入,常见于密码框的输入</em></p>
<p>  <u>左,右视图模式:</u> <strong>textField.leftViewMode UITextFieldViewMode类型(枚举)  设置文本框的左右视图*<br>*<br>  **UIButton</strong>  继承于UIControl</p>
<p><u>1.创建方法:</u>  <em>UIButton *button = [[UIButton buttonWithType:UIButtonType]  UIButtonType为枚举类型,有:UIButtonTypeCustom,UIButtonTypeSystem等类型</em></p>
<p><u>2.常用属性:</u></p>
<p>  <u>边框大小:</u> <em>button.frame  CGRect类型  可设置或获取button的大小(相对大小),赋值方法与label类似，</em></p>
<p>  <u>是否被选中:</u><em>button.selected  BOOL类型  可设置或获取button是否被选中</em></p>
<p>  <u>button标题颜色:</u> <em>button.tintColor  UIColor类型  可设置或获取button标题的颜色</em></p>
<p><u>3.功能方法:</u></p>
<p>  <u>设置标题:</u> <em>[button setTitle:title forState:UIControlState]  给button的标题设为title, UIControlState为button的状态,有:UIControlStateNormal, UIControlStateSelected等</em></p>
<p>  <u>设置背景图片:</u> <em>[button setBackgroundImage:image forState:UIControlState]  将图片image设置为button的背景图片</em></p>
<p>  <u>添加响应事件:</u><em>[button addTarget:target] action:action forControlEvents:UIControlEvents]  为button添加事件,target为响应对象,action为响应方法,UIControlEvents为触发事件</em></p>
<p><strong>UIImageView</strong>  直接继承于UIView </p>
<p><em>UIImageView用于显示图片类资源,可以形象地将其理解为一个相框,用来显示”相片”</em></p>
<p><u>1.创建方法:</u>  <em>UIImageView *imageView = [[UIImageView alloc] initWithFrame:frame]</em></p>
<p><u>2.常用属性:</u></p>
<p>  <u>图片:</u> <em>*imageView.image UIImage类型  可设置或获取imageView的图片imag动画</em></p>
<p><strong>学习心得：</strong>这一周的考核任务说轻松是比前几周轻松，但是内容较多，需要多加消化，多加练习。自己也有拿小本本记录一些。xcode中还有很多自己为涉及的领域，之后应该就会接触到吧。storyboard是一个挺好玩的东西，可以创建自己喜欢的界面，同时它还有很多地方等待着我去探索。上面有些是网上查找的，比如UI的扩展和Assets的相关运用，有些是通过相关视频精简出来的。通过本周的学习，对xcode又有了新的了解，收获满满，开心😊~语法也在继续深入学习中，争取更上一层楼！</p>
]]></content>
  </entry>
  <entry>
    <title>swift3</title>
    <url>/2019/11/09/swift3/</url>
    <content><![CDATA[<h3 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h3><p> <strong>extension</strong>：<em>允许给已有的类、结构体、枚举、协议类型，添加新功能。</em> </p>
<p> <strong>protocol</strong>：<em>定义了一组方法、属性或其它要求，用于满足特定任务和一系列功能。</em> </p>
<p> <strong>case</strong>：<em>该语句在 switch 语句中列出，在每个分支可以进行模式匹配。</em> </p>
<p> <strong>return</strong>：<em>立刻终止当前上下文，离开当前作用域，此外在返回时可以额外携带一个值 。</em></p>
<p> <strong>self</strong>：<em>任何类型的实例都拥有的隐式属性，等同于实例本身。此外还可以用于区分函数参数和成员属性名称相同的情况。</em> </p>
<p> <strong>get</strong>：<em>返回成员的值。还可以用在计算型属性上，间接获取其它属性的值。</em> </p>
<p> <strong>required</strong>：<em>确保编译器会检查该类的所有子类，全部实现了指定的构造器方法。</em> </p>
<p> <strong>set</strong>：<em>通过获取的新值来设置成员的值。同样可以用于计算型属性来间接设置其它属性。如果计算型属性的 setter 没有定义新值的名称，可以使用默认的 newValue。</em> </p>
<h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><p>协议真的很好用，可是自己的榆木脑袋却不能将它们用到一起，实属惭愧。最近在忙着复习期中，繁重的作业让我没能认真学习swift，总是一种看着都懂，一上手就脑袋空白，思维方法有待提高。因为没有全身心投入学习swift，产生了一种swift很难，自己不敢轻易下手的心理，望在接下来的学习中改变这种心理，增强对swift兴趣与喜爱。</p>
<p>` <u>1.定义静态方法：统计出勤率</u></p>
<p>protocol protocolA {<br>  var marks: Int{set get}<br>  var result: Bool{get}<br>  func attendence() -&gt; String<br>  func markSecured() -&gt; String<br>}<br>protocol protocolB: protocolA {<br>  var subject: String{get set}<br>  var stuName: String{get set}<br>}<br>class StudentMarks: protocolB {<br>  var subject: String = “match”<br>  var stuName: String = “jack”<br>  var marks: Int = 80<br>  let result: Bool = true<br>  func attendence() -&gt; String {<br>     return “The(stuName) has scored 99% attendance”<br>  }<br>  func markSecured() -&gt; String {<br>    return “(stuName) has scored (marks)”<br>  }<br>}<br>let stu = StudentMarks()<br>stu.stuName = “rose”<br>print(stu.stuName, stu.subject)<br>print(stu.attendence())</p>
<p><u>2.声名个动物的父类，然后让猫和狗class都继承与动物class。在定义一个宠物的属性，里面有玩耍和喂食两个方法，让猫和狗都继承与宠物协议</u></p>
<p>protocol Pet {<br>  func playWith()<br>  func fed(food : String)<br>}<br>class Animal{<br>  var name : String = “”<br>  var birthPlace : String = “”<br>  init(name: String,birthPlace:String) {<br>    self.name = name<br>    self.birthPlace = birthPlace<br>  }<br>}</p>
<p>class Dog: Animal, Pet{<br>  func playWith() {<br>    print(“狗狗在玩”)<br>  }<br>  func fed(food: String){<br>    if food == “骨头” {<br>     print(“狗狗高兴”)<br>    }<br>    else{<br>     print(“狗狗伤心”)<br>    }<br>  }<br>}<br>class Cat: Animal, Pet {<br>  func playWith() {<br>    print(“猫猫在玩”)<br>  }<br>  func fed(food: String) {<br>    if food == “鱼” {<br>      print(“猫猫高兴”)<br>    }<br>    else{<br>      print(“猫猫伤心”)<br>    }<br>  }<br>}</p>
<p>let dog = Dog(name: “狗狗小黑”, birthPlace: “北京”)<br>dog.playWith()<br>dog.fed(food: “骨头”)<br>let cat = Cat(name: “猫猫小白”, birthPlace: “上海”)<br>cat.playWith()<br>cat.fed(food: “鱼”)</p>
<p><u>3.协议普通方法协议：输出一个随机数</u></p>
<p>// 定义协议，指定方法要求<br>protocol RandomNumberGenerator {<br>  func random() -&gt; Double  //实现该协议，需要实现该方法<br>}</p>
<p>class LinearCongruentialGenerator :RandomNumberGenerator {<br>  var lastRandom = 42.0<br>  let m = 139968.0<br>  let a = 3877.0<br>  let c = 29573.0</p>
<p>  // 实现协议的方法<br>  func random() -&gt; Double {<br>    lastRandom = ((lastRandom * a + c) .truncatingRemainder(dividingBy: m))//truncatingRemainder:取余<br>    return lastRandom / m<br>  }<br>}</p>
<p>let generator = LinearCongruentialGenerator()<br>print(“随机数:(generator.random())”)   //结果：随机数: 0.37464991998171<br>print(“另一个随机数:(generator.random())”) //结果: 另一个随机数: 0.729023776863283</p>
<p> `</p>
]]></content>
  </entry>
  <entry>
    <title>swift2</title>
    <url>/2019/11/03/swift2/</url>
    <content><![CDATA[<h2 id="swift"><a href="#swift" class="headerlink" title="swift"></a><strong>swift</strong></h2><p><strong>学习笔记及收获</strong></p>
<p><strong>class</strong>：<em>允许一个嘞继承另一个类的特性</em></p>
<p>​             <em>类型转换，允许在运行时检查和指定一个类的实际类型</em></p>
<p>​             <em>析构方法允许类的实例释放所有资源</em></p>
<p>​             <em>引用计数允许多个引用指向一个实例</em></p>
<p><strong>struct</strong>：<em>通用 灵活的结构体，是程序的基础组成部分，并提供了默认初始化方法。与class不同                   ，当struct在代码中被传递时，是被拷贝的，并不是使用引用计数。除此之外，struct没有下面       的这些功能：</em></p>
<p>​             <em>使用继承</em></p>
<p>​             <em>运行时的类型转换</em></p>
<p>​             <em>使用析构方法</em> </p>
<p><strong>static</strong>：<em>用于定义类方法，在类型本身进行调用。此外还可以定义静态成员。</em></p>
<p><strong>do</strong>:<em>用于处理错误代码段的开始。</em></p>
<p><strong>self</strong>：<em>任何类型的实例都拥有的隐式属性，等同于实时本身。此外还可以用于区分函数参数和成员属性名称相同的情况。</em></p>
<p><strong>throws</strong>：<em>指明在一个函数 方法 初始化方法中可能会抛出error。</em></p>
<p><strong>override</strong>：<em>指明子类会提供自定义实现，覆盖父类的实例方法 类型方法 实例属性 类型属性 下标。如果没有实现，则会直接继承父类。</em></p>
<p><strong>func</strong>:<em>包含用于执行特定任务的代码块。</em></p>
<p><strong>init</strong>：<em>类 结构体 枚举的实例的初始化准备过程。</em></p>
<p><strong>import</strong>：<em>引用一个值传入独立单元构建的框架或者应用。</em></p>
<p><strong>enum</strong>：<em>定义包含了一组有关的值的类型，并可以以一种类型安全的方法使用这些值。在swift中，枚举是一等类型，拥有在其他语言中有class才会支持的特性。</em></p>
<p><strong>收获</strong>：慢慢摸索吧，快期中了，为复习忙的团团转，一堆作业制裁，没有较认真地完成考核任务，心怀愧疚，成功路上总是布满荆棘，只有面带微笑，身披铠甲，不惧一切地勇往直前，终究会迎来胜利地曙光。学习swift，痛并快乐着。今天也要热爱swift呀，总有一天会熟透于心，熟练敲出正确地代码。</p>
<p><strong>代码</strong>：</p>
<p><del>（自我感觉不好）</del></p>
<p>` //   第0列  第1列<br>//第0行  4    -2   索引：当前列 + 0<br>//第1行  9    0   索引：当前列 + 之前所有行列总数（当前行 * 总列数）<br>//<br>//通过变换成Int数组[4， -2， 9， 0],以索引来访问，确保数组索引不得越界。<br>class Array{<br>  var Array : String<br>  init(Array: String) {<br>    self.Array = Array<br>  }<br>}<br>struct Matrix {<br>  var rows , cols :Int<br>  var grid : [Int]</p>
<p>  init(rows: Int,cols: Int) {<br>    self.cols = cols<br>    self.rows = rows</p>
<pre><code>grid = Array(repeating: 0, Array: rows * cols)</code></pre><p>  }<br>  func indexIsValid(row: Int,col: Int) -&gt; Bool {<br>    return row &gt;= 0 &amp;&amp; row &lt; rows &amp;&amp; col &gt;= 0 &amp;&amp; col &lt; cols<br>  }<br>  subscript(row: Int,col: Int) -&gt; Int{<br>    get{<br>      assert(indexIsValid(row: row, col: col),”数组索引越界”)<br>      return grid[col + (row * col)]<br>    }<br>    set {<br>      assert(indexIsValid(row: row, col: col),”数组索引越界”)<br>      grid[col + (row * col)] = newValue<br>    }<br>  }<br>}<br> `</p>
]]></content>
  </entry>
  <entry>
    <title>swift</title>
    <url>/2019/10/26/swift/</url>
    <content><![CDATA[<h2 id="学习笔记及收获"><a href="#学习笔记及收获" class="headerlink" title="学习笔记及收获"></a>学习笔记及收获</h2><p><strong><em>三天学会 swift3.0  第一天</em></strong></p>
<p>1.Hello World</p>
<p>2.常量</p>
<p>3.变量</p>
<p>4.int和类型推断</p>
<p>5.Double</p>
<p>6.类型安全</p>
<p>7.Bool</p>
<p>8.Tuple</p>
<p>9.Optional</p>
<p>10.基础操作符</p>
<p>11.字符和字符串</p>
<p>12.集合类型-数组</p>
<p>13.集合类型-Set</p>
<p>14.集合类型-字典</p>
<p>15.控制流</p>
<p>16.函数</p>
<p>17.闭包</p>
<p>18.枚举</p>
<p><strong><em>收获</em></strong></p>
<p><u>第一次接触，总是感觉无从下手，看了好几遍教程，纠结地写下的代码，虽然可能并不通顺，有点无厘头 ，但总算是把学到的知识用于实践，以后加倍努力提升自己，写下更美观更有意义的代码。加油，冲鸭！！！</u></p>
<p>`enum Weather {<br>    case sunny<br>    case cloudy<br>    case rainy<br>    case snow<br>    case froggy<br>}<br>Weather.cloudy</p>
<p>var addr : String? = “中南民族大学”</p>
<p>var places = [“a”:”教室”,”b”:”实验室”,”c”:”寝室”]<br>places.count<br>places.isEmpty</p>
<p>places[“d”] = “食堂”</p>
<p>places</p>
<p>for place in places {<br>    print(place)</p>
<p>}<br>let course  = 2+4+2+0+1</p>
<p>var money = false<br>if money {<br>    print(“双十一剁手”)<br>}else{<br>    print(“过光棍节”)<br>}</p>
<p>`</p>
]]></content>
  </entry>
  <entry>
    <title>First</title>
    <url>/2019/10/20/First/</url>
    <content><![CDATA[<p> 人说，林深时见鹿，<br>海蓝时见鲸，<br>梦醒时见你。<br>可实际，<br>林深时雾起，<br>海蓝时浪涌，<br>梦醒时也许未见鹿，<br>未见鲸，亦未见你。<br>但是，<br>鹿踏雾而来，<br>鲸随浪儿起，<br>你没回头，又怎知我没来过。</p>
<p>—— 网易云热评《渡我不渡她》 </p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
